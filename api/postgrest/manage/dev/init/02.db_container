#!/usr/bin/env ruby

begin
  require 'dotenv'
rescue LoadError
  abort('apt-get install ruby-dotenv')
end

Dotenv.load('~/.env/ng-reminders/postgrest/db.env')

def psql(cmd, dbname = nil)
  args = [
    'docker-compose', 'exec',
    '--env', 'PGUSER=postgres',
    '--env', "PGPASSWORD=#{ENV['POSTGRES_PASSWORD']}",
    'db',
    'psql', '--echo-all', '-c', cmd, # --echo-queries, --echo-errors doesn't give better output
  ]
  if dbname
    args += ['-d', dbname]
  end
  system(*args) || fail("Could not exec: #{args}")
end

# Remove previous
system('docker-compose', 'down')
system('docker volume rm postgrest_db-data')

# Creates postgrest_db_1
system('docker-compose', 'up', '-d', 'db')
puts("\e[1;33mWill now setup pg for postgrest\e[0;m")

1.upto(10) do |i|
  begin
    warn("\e[1;35mWaiting for db startup, attempt ##{i}\e[0;m")
    psql('SELECT 1')
    warn("\e[1;34mConnection OK!\e[0;m")
    break
  rescue => e
    sleep(1)
  end
end

psql("CREATE ROLE authenticator NOINHERIT LOGIN PASSWORD '#{ENV.fetch("AUTHENTICATOR_PASSWORD")}'")

['DEV_DBNAME', 'TEST_DBNAME'].each do |env_var|
  dbname = ENV.fetch(env_var)
  psql("CREATE DATABASE #{dbname}")

  settings_sql = <<~EOS
    CREATE SCHEMA settings;

    CREATE TABLE settings.secrets (
      key    TEXT PRIMARY KEY,
      value  TEXT NOT NULL
    );

    INSERT INTO settings.secrets (key, value) VALUES (
      'jwt_secret', '#{ENV.fetch("POSTGREST_JWT_SECRET")}' -- for user auth functions
    );
  EOS
  psql(settings_sql, dbname)
end


puts <<EOS
\e[1;33m
DB setup almost complete. Now run:

  ./manage/dev/dbmate migrate
  ./manage/dev/start_postgrest

Then access DB data this way:
  ./manage/dev/psql
  http http://localhost:4444/todos
\e[0;m
EOS
