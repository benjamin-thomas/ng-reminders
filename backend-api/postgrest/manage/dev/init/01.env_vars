#!/usr/bin/env ruby

require 'fileutils'
require 'colored'

TOP_DIR = File.expand_path('~/.env/ng-reminders/postgrest')

def gen_password
  # Error handling not required, backticks fails ok if pwgen is not in path
  `pwgen 40 1`.chomp
end

#DATABASE_URL: postgres://{user}:{password}@{hostname}:{port}/{database-name}
authenticator_pw = gen_password
postgres_pw = gen_password
dev_dbname = 'ng_reminders_postgrest_development'
test_dbname = 'ng_reminders_postgrest_test'
app_vars = {
  AUTHENTICATOR_PASSWORD: authenticator_pw, # required by manage/dev/init/02.db_container
  POSTGRES_PASSWORD: postgres_pw, # requirement for postgres image setup, per upstream

  DEV_DBNAME: dev_dbname,
  TEST_DBNAME: test_dbname,

  POSTGREST_URL:            "postgres://authenticator:#{authenticator_pw}@db:5432/postgres",
  DBMATE_URL_DEVELOPMENT:   "postgres://postgres:#{postgres_pw}@db:5432/#{dev_dbname}?sslmode=disable",
  DATABASE_URL_DEVELOPMENT: "postgres://authenticator:#{authenticator_pw}@db:5432/#{dev_dbname}",
  DATABASE_URL_TEST:        "postgres://authenticator:#{authenticator_pw}@db:5432/#{test_dbname}",
}

def setup!(arg)
  if arg == 'redo'
    warn("Removing previous config".red)
    FileUtils.rm_r(TOP_DIR)
  end
  FileUtils.mkdir_p(TOP_DIR)
end

def create_env_file(filename, vars)
  env_path = File.join(TOP_DIR, filename)
  if File.exist?(env_path)
    warn("Skipping create env file because exists (use 'redo' to recreate): #{env_path}".yellow.bold)
    return
  end

  warn("Creating env file: #{env_path}".blue.bold)
  File.open(env_path, 'w') do |f|
    vars.each do |name, value|
      f.write("#{name}=#{value}\n")
    end
  end
end

setup!(ARGV[0])

create_env_file('db.env', app_vars)

create_env_file('extra.env', {
  RAND_VAR: rand(1..999),
})

puts(`tail -n+1 #{TOP_DIR}/*`)
